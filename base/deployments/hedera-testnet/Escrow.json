{
  "address": "0x802f1E3f5E99924ccbb8bF762B32d8A2836806Fa",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "merchant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "merchant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_merchants",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_merchants",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "merchantBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "merchantHasToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merchantTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_merchant",
          "type": "address"
        }
      ],
      "name": "viewEscrow",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x11d28c704135b6cf223dbcc428dceac73a77b0f07c99e50e9384407eea4fe85a",
  "receipt": {
    "to": null,
    "from": "0xfEC6BB7506B4c06ddA315c8C12ED030eb05bdE28",
    "contractAddress": "0x802f1E3f5E99924ccbb8bF762B32d8A2836806Fa",
    "transactionIndex": 6,
    "gasUsed": "1057010",
    "logsBloom": "0x
    "blockHash": "0xcbe2bdb32465dfa249d29e0735d89b6059942c091040dbaf9d79f9757ecb5eb5",
    "transactionHash": "0x11d28c704135b6cf223dbcc428dceac73a77b0f07c99e50e9384407eea4fe85a",
    "logs": [],
    "blockNumber": 26333838,
    "cumulativeGasUsed": "1057010",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cbacd29a5d791d9f96579ae07e16c893",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_merchants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_merchants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"merchantBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"merchantHasToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merchantTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_merchant\",\"type\":\"address\"}],\"name\":\"viewEscrow\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Use address(0) to represent native token (ETH/FLOW/\\u21afHBAR on EVM).\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"depositFor(address,address[],address[],uint256[])\":{\"params\":{\"_amounts\":\"Amounts per leg\",\"_from\":\"The token owner for ERC20 transferFrom (ignored for native legs)\",\"_merchants\":\"Merchant list (same length as _tokens/_amounts)\",\"_tokens\":\"Token addresses (use address(0) for native)\"}}},\"title\":\"Simple Escrow (Relayer-friendly)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositFor(address,address[],address[],uint256[])\":{\"notice\":\"Relayer-friendly path. For ERC20, user must approve this Escrow as spender:         IERC20(token).approve(address(this), amount)\"}},\"notice\":\"Minimal escrow with:         - viewEscrow(merchant)         - deposit(...)           // user-pays gas path (unchanged)         - depositFor(from, ...)  // relayer path (Escrow is spender)         - withdraw()             // merchant pulls all their balances\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Simple Escrow (Relayer-friendly)\\n * @notice Minimal escrow with:\\n *         - viewEscrow(merchant)\\n *         - deposit(...)           // user-pays gas path (unchanged)\\n *         - depositFor(from, ...)  // relayer path (Escrow is spender)\\n *         - withdraw()             // merchant pulls all their balances\\n * @dev Use address(0) to represent native token (ETH/FLOW/\\u21afHBAR on EVM).\\n */\\ncontract Escrow is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // merchant => token => balance\\n    mapping(address => mapping(address => uint256)) public merchantBalances;\\n\\n    // track token list per merchant\\n    mapping(address => address[]) public merchantTokens;\\n    mapping(address => mapping(address => bool)) public merchantHasToken;\\n\\n    event Deposited(address indexed payer, address indexed merchant, address indexed token, uint256 amount);\\n    event Withdrawn(address indexed merchant, address indexed token, uint256 amount);\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Views\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function viewEscrow(address _merchant)\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory balances)\\n    {\\n        address[] memory list = merchantTokens[_merchant];\\n        uint256[] memory bals = new uint256[](list.length);\\n        for (uint256 i = 0; i < list.length; i++) {\\n            bals[i] = merchantBalances[_merchant][list[i]];\\n        }\\n        return (list, bals);\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Deposit (user calls directly; ERC20 pulled from msg.sender)\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function deposit(\\n        address[] calldata _merchants,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable nonReentrant {\\n        _validateArrays(_merchants, _tokens, _amounts);\\n\\n        uint256 totalEth = _sumNative(_tokens, _amounts);\\n        require(msg.value == totalEth, \\\"Escrow: bad native amount\\\");\\n\\n        for (uint256 i = 0; i < _merchants.length; i++) {\\n            _credit(_merchants[i], _tokens[i], _amounts[i], msg.sender);\\n        }\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // DepositFor (relayer calls; ERC20 pulled from `from`, Escrow must be spender)\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    /**\\n     * @notice Relayer-friendly path. For ERC20, user must approve this Escrow as spender:\\n     *         IERC20(token).approve(address(this), amount)\\n     * @param _from      The token owner for ERC20 transferFrom (ignored for native legs)\\n     * @param _merchants Merchant list (same length as _tokens/_amounts)\\n     * @param _tokens    Token addresses (use address(0) for native)\\n     * @param _amounts   Amounts per leg\\n     */\\n    function depositFor(\\n        address _from,\\n        address[] calldata _merchants,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) external payable nonReentrant {\\n        require(_from != address(0), \\\"Escrow: from=0\\\");\\n        _validateArrays(_merchants, _tokens, _amounts);\\n\\n        uint256 totalEth = _sumNative(_tokens, _amounts);\\n        require(msg.value == totalEth, \\\"Escrow: bad native amount\\\");\\n\\n        for (uint256 i = 0; i < _merchants.length; i++) {\\n            _creditFrom(_merchants[i], _tokens[i], _amounts[i], _from, msg.sender);\\n        }\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Withdraw (merchant pulls all)\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function withdraw() external nonReentrant {\\n        address merch = msg.sender;\\n        address[] memory tokens = merchantTokens[merch];\\n        bool any;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 bal = merchantBalances[merch][token];\\n            if (bal == 0) continue;\\n\\n            merchantBalances[merch][token] = 0; // effects first\\n            any = true;\\n\\n            if (token == address(0)) {\\n                (bool ok, ) = payable(merch).call{value: bal}(\\\"\\\");\\n                require(ok, \\\"Escrow: native xfer failed\\\");\\n            } else {\\n                IERC20(token).safeTransfer(merch, bal);\\n            }\\n\\n            emit Withdrawn(merch, token, bal);\\n        }\\n\\n        require(any, \\\"Escrow: nothing to withdraw\\\");\\n    }\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Internal helpers\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _validateArrays(\\n        address[] calldata _merchants,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    ) internal pure {\\n        require(\\n            _merchants.length == _tokens.length && _tokens.length == _amounts.length,\\n            \\\"Escrow: length mismatch\\\"\\n        );\\n        require(_merchants.length > 0, \\\"Escrow: empty\\\");\\n        for (uint256 i = 0; i < _merchants.length; i++) {\\n            require(_merchants[i] != address(0), \\\"Escrow: merchant=0\\\");\\n            require(_amounts[i] > 0, \\\"Escrow: amount=0\\\");\\n        }\\n    }\\n\\n    function _sumNative(address[] calldata _tokens, uint256[] calldata _amounts) internal pure returns (uint256 s) {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            if (_tokens[i] == address(0)) s += _amounts[i];\\n        }\\n    }\\n\\n    function _trackToken(address _merchant, address _token) internal {\\n        if (!merchantHasToken[_merchant][_token]) {\\n            merchantHasToken[_merchant][_token] = true;\\n            merchantTokens[_merchant].push(_token);\\n        }\\n    }\\n\\n    // user-pays path: pull ERC20 from msg.sender\\n    function _credit(address _merchant, address _token, uint256 _amount, address _payer) internal {\\n        if (_token == address(0)) {\\n            merchantBalances[_merchant][_token] += _amount;\\n            _trackToken(_merchant, _token);\\n            emit Deposited(_payer, _merchant, _token, _amount);\\n        } else {\\n            IERC20(_token).safeTransferFrom(_payer, address(this), _amount);\\n            merchantBalances[_merchant][_token] += _amount;\\n            _trackToken(_merchant, _token);\\n            emit Deposited(_payer, _merchant, _token, _amount);\\n        }\\n    }\\n\\n    // relayer path: pull ERC20 from _from (Escrow is approved spender)\\n    function _creditFrom(\\n        address _merchant,\\n        address _token,\\n        uint256 _amount,\\n        address _from,\\n        address _payer // msg.sender (relayer) for event clarity\\n    ) internal {\\n        if (_token == address(0)) {\\n            merchantBalances[_merchant][_token] += _amount;\\n            _trackToken(_merchant, _token);\\n            emit Deposited(_payer, _merchant, _token, _amount);\\n        } else {\\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\\n            merchantBalances[_merchant][_token] += _amount;\\n            _trackToken(_merchant, _token);\\n            emit Deposited(_from, _merchant, _token, _amount);\\n        }\\n    }\\n\\n    // Optional: accept stray native refunds\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x8dce7c3e30e31ab805d60493dd0c6fcf9d9de9d343daa716b7a918f48f050f02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000556111c3806100256000396000f3fe6080604052600436106100745760003560e01c80639019fe151161004e5780639019fe15146100e15780639643ffbe1461012c57806396b8118914610172578063b11092c2146101aa57600080fd5b80631800b604146100805780633ccfd60b146100b75780636be795bd146100ce57600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610e86565b6101bd565b6040516100ae929190610ea8565b60405180910390f35b3480156100c357600080fd5b506100cc61030f565b005b6100cc6100dc366004610f78565b610590565b3480156100ed57600080fd5b5061011c6100fc366004611023565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ae565b34801561013857600080fd5b50610164610147366004611023565b600160209081526000928352604080842090915290825290205481565b6040519081526020016100ae565b34801561017e57600080fd5b5061019261018d366004611056565b6106e1565b6040516001600160a01b0390911681526020016100ae565b6100cc6101b8366004611080565b610719565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083526060948594909392919083018282801561022c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020e575b505050505090506000815167ffffffffffffffff81111561024f5761024f61111a565b604051908082528060200260200182016040528015610278578160200160208202803683370190505b50905060005b8251811015610304576001600160a01b038616600090815260016020526040812084519091908590849081106102b6576102b6611130565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106102f1576102f1611130565b602090810291909101015260010161027e565b509094909350915050565b610317610821565b3360008181526002602090815260408083208054825181850281018501909352808352919290919083018282801561037857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161035a575b50505050509050600080600090505b82518110156105335760008382815181106103a4576103a4611130565b6020908102919091018101516001600160a01b038088166000908152600184526040808220928416825291909352822054909250908190036103e757505061052b565b6001600160a01b0380871660009081526001602081815260408084209487168085529490915282209190915594506104c7576000866001600160a01b03168260405160006040518083038185875af1925050503d8060008114610466576040519150601f19603f3d011682016040523d82523d6000602084013e61046b565b606091505b50509050806104c15760405162461bcd60e51b815260206004820152601a60248201527f457363726f773a206e61746976652078666572206661696c656400000000000060448201526064015b60405180910390fd5b506104db565b6104db6001600160a01b038316878361084b565b816001600160a01b0316866001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb8360405161052091815260200190565b60405180910390a350505b600101610387565b50806105815760405162461bcd60e51b815260206004820152601b60248201527f457363726f773a206e6f7468696e6720746f207769746864726177000000000060448201526064016104b8565b50505061058e6001600055565b565b610598610821565b6001600160a01b0387166105df5760405162461bcd60e51b815260206004820152600e60248201526d0457363726f773a2066726f6d3d360941b60448201526064016104b8565b6105ed8686868686866108af565b60006105fb85858585610a28565b90508034146106485760405162461bcd60e51b8152602060048201526019602482015278115cd8dc9bddce88189859081b985d1a5d9948185b5bdd5b9d603a1b60448201526064016104b8565b60005b868110156106cc576106c488888381811061066857610668611130565b905060200201602081019061067d9190610e86565b87878481811061068f5761068f611130565b90506020020160208101906106a49190610e86565b8686858181106106b6576106b6611130565b905060200201358c33610aa3565b60010161064b565b50506106d86001600055565b50505050505050565b600260205281600052604060002081815481106106fd57600080fd5b6000918252602090912001546001600160a01b03169150829050565b610721610821565b61072f8686868686866108af565b600061073d85858585610a28565b905080341461078a5760405162461bcd60e51b8152602060048201526019602482015278115cd8dc9bddce88189859081b985d1a5d9948185b5bdd5b9d603a1b60448201526064016104b8565b60005b8681101561080d576108058888838181106107aa576107aa611130565b90506020020160208101906107bf9190610e86565b8787848181106107d1576107d1611130565b90506020020160208101906107e69190610e86565b8686858181106107f8576107f8611130565b9050602002013533610beb565b60010161078d565b50506108196001600055565b505050505050565b60026000540361084457604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038381166024830152604482018390526108aa91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610d32565b505050565b84831480156108bd57508281145b6109095760405162461bcd60e51b815260206004820152601760248201527f457363726f773a206c656e677468206d69736d6174636800000000000000000060448201526064016104b8565b846109465760405162461bcd60e51b815260206004820152600d60248201526c457363726f773a20656d70747960981b60448201526064016104b8565b60005b858110156106d857600087878381811061096557610965611130565b905060200201602081019061097a9190610e86565b6001600160a01b0316036109c55760405162461bcd60e51b81526020600482015260126024820152710457363726f773a206d65726368616e743d360741b60448201526064016104b8565b60008383838181106109d9576109d9611130565b9050602002013511610a205760405162461bcd60e51b815260206004820152601060248201526f0457363726f773a20616d6f756e743d360841b60448201526064016104b8565b600101610949565b6000805b84811015610a9a576000868683818110610a4857610a48611130565b9050602002016020810190610a5d9190610e86565b6001600160a01b031603610a9257838382818110610a7d57610a7d611130565b9050602002013582610a8f9190611146565b91505b600101610a2c565b50949350505050565b6001600160a01b038416610b42576001600160a01b03808616600090815260016020908152604080832093881683529290529081208054859290610ae8908490611146565b90915550610af890508585610da3565b836001600160a01b0316856001600160a01b0316826001600160a01b031660008051602061116e83398151915286604051610b3591815260200190565b60405180910390a4610be4565b610b576001600160a01b038516833086610e31565b6001600160a01b03808616600090815260016020908152604080832093881683529290529081208054859290610b8e908490611146565b90915550610b9e90508585610da3565b836001600160a01b0316856001600160a01b0316836001600160a01b031660008051602061116e83398151915286604051610bdb91815260200190565b60405180910390a45b5050505050565b6001600160a01b038316610c8a576001600160a01b03808516600090815260016020908152604080832093871683529290529081208054849290610c30908490611146565b90915550610c4090508484610da3565b826001600160a01b0316846001600160a01b0316826001600160a01b031660008051602061116e83398151915285604051610c7d91815260200190565b60405180910390a4610d2c565b610c9f6001600160a01b038416823085610e31565b6001600160a01b03808516600090815260016020908152604080832093871683529290529081208054849290610cd6908490611146565b90915550610ce690508484610da3565b826001600160a01b0316846001600160a01b0316826001600160a01b031660008051602061116e83398151915285604051610d2391815260200190565b60405180910390a45b50505050565b600080602060008451602086016000885af180610d55576040513d6000823e3d81fd5b50506000513d91508115610d6d578060011415610d7a565b6001600160a01b0384163b155b15610d2c57604051635274afe760e01b81526001600160a01b03851660048201526024016104b8565b6001600160a01b0380831660009081526003602090815260408083209385168352929052205460ff16610e2d576001600160a01b038083166000818152600360209081526040808320948616808452948252808320805460ff1916600190811790915593835260028252822080549384018155825290200180546001600160a01b03191690911790555b5050565b6040516001600160a01b038481166024830152838116604483015260648201839052610d2c9186918216906323b872dd90608401610878565b80356001600160a01b0381168114610e8157600080fd5b919050565b600060208284031215610e9857600080fd5b610ea182610e6a565b9392505050565b604080825283519082018190526000906020906060840190828701845b82811015610eea5781516001600160a01b031684529284019290840190600101610ec5565b5050508381038285015284518082528583019183019060005b81811015610f1f57835183529284019291840191600101610f03565b5090979650505050505050565b60008083601f840112610f3e57600080fd5b50813567ffffffffffffffff811115610f5657600080fd5b6020830191508360208260051b8501011115610f7157600080fd5b9250929050565b60008060008060008060006080888a031215610f9357600080fd5b610f9c88610e6a565b9650602088013567ffffffffffffffff80821115610fb957600080fd5b610fc58b838c01610f2c565b909850965060408a0135915080821115610fde57600080fd5b610fea8b838c01610f2c565b909650945060608a013591508082111561100357600080fd5b506110108a828b01610f2c565b989b979a50959850939692959293505050565b6000806040838503121561103657600080fd5b61103f83610e6a565b915061104d60208401610e6a565b90509250929050565b6000806040838503121561106957600080fd5b61107283610e6a565b946020939093013593505050565b6000806000806000806060878903121561109957600080fd5b863567ffffffffffffffff808211156110b157600080fd5b6110bd8a838b01610f2c565b909850965060208901359150808211156110d657600080fd5b6110e28a838b01610f2c565b909650945060408901359150808211156110fb57600080fd5b5061110889828a01610f2c565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8082018082111561116757634e487b7160e01b600052601160045260246000fd5b9291505056fe4174a9435a04d04d274c76779cad136a41fde6937c56241c09ab9d3c7064a1a9a2646970667358221220cb9afe469584ed6027068595f0a64ff4329da9edb999381e4588f3bf07bcebff64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80639019fe151161004e5780639019fe15146100e15780639643ffbe1461012c57806396b8118914610172578063b11092c2146101aa57600080fd5b80631800b604146100805780633ccfd60b146100b75780636be795bd146100ce57600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610e86565b6101bd565b6040516100ae929190610ea8565b60405180910390f35b3480156100c357600080fd5b506100cc61030f565b005b6100cc6100dc366004610f78565b610590565b3480156100ed57600080fd5b5061011c6100fc366004611023565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ae565b34801561013857600080fd5b50610164610147366004611023565b600160209081526000928352604080842090915290825290205481565b6040519081526020016100ae565b34801561017e57600080fd5b5061019261018d366004611056565b6106e1565b6040516001600160a01b0390911681526020016100ae565b6100cc6101b8366004611080565b610719565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083526060948594909392919083018282801561022c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161020e575b505050505090506000815167ffffffffffffffff81111561024f5761024f61111a565b604051908082528060200260200182016040528015610278578160200160208202803683370190505b50905060005b8251811015610304576001600160a01b038616600090815260016020526040812084519091908590849081106102b6576102b6611130565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106102f1576102f1611130565b602090810291909101015260010161027e565b509094909350915050565b610317610821565b3360008181526002602090815260408083208054825181850281018501909352808352919290919083018282801561037857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161035a575b50505050509050600080600090505b82518110156105335760008382815181106103a4576103a4611130565b6020908102919091018101516001600160a01b038088166000908152600184526040808220928416825291909352822054909250908190036103e757505061052b565b6001600160a01b0380871660009081526001602081815260408084209487168085529490915282209190915594506104c7576000866001600160a01b03168260405160006040518083038185875af1925050503d8060008114610466576040519150601f19603f3d011682016040523d82523d6000602084013e61046b565b606091505b50509050806104c15760405162461bcd60e51b815260206004820152601a60248201527f457363726f773a206e61746976652078666572206661696c656400000000000060448201526064015b60405180910390fd5b506104db565b6104db6001600160a01b038316878361084b565b816001600160a01b0316866001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb8360405161052091815260200190565b60405180910390a350505b600101610387565b50806105815760405162461bcd60e51b815260206004820152601b60248201527f457363726f773a206e6f7468696e6720746f207769746864726177000000000060448201526064016104b8565b50505061058e6001600055565b565b610598610821565b6001600160a01b0387166105df5760405162461bcd60e51b815260206004820152600e60248201526d0457363726f773a2066726f6d3d360941b60448201526064016104b8565b6105ed8686868686866108af565b60006105fb85858585610a28565b90508034146106485760405162461bcd60e51b8152602060048201526019602482015278115cd8dc9bddce88189859081b985d1a5d9948185b5bdd5b9d603a1b60448201526064016104b8565b60005b868110156106cc576106c488888381811061066857610668611130565b905060200201602081019061067d9190610e86565b87878481811061068f5761068f611130565b90506020020160208101906106a49190610e86565b8686858181106106b6576106b6611130565b905060200201358c33610aa3565b60010161064b565b50506106d86001600055565b50505050505050565b600260205281600052604060002081815481106106fd57600080fd5b6000918252602090912001546001600160a01b03169150829050565b610721610821565b61072f8686868686866108af565b600061073d85858585610a28565b905080341461078a5760405162461bcd60e51b8152602060048201526019602482015278115cd8dc9bddce88189859081b985d1a5d9948185b5bdd5b9d603a1b60448201526064016104b8565b60005b8681101561080d576108058888838181106107aa576107aa611130565b90506020020160208101906107bf9190610e86565b8787848181106107d1576107d1611130565b90506020020160208101906107e69190610e86565b8686858181106107f8576107f8611130565b9050602002013533610beb565b60010161078d565b50506108196001600055565b505050505050565b60026000540361084457604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038381166024830152604482018390526108aa91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610d32565b505050565b84831480156108bd57508281145b6109095760405162461bcd60e51b815260206004820152601760248201527f457363726f773a206c656e677468206d69736d6174636800000000000000000060448201526064016104b8565b846109465760405162461bcd60e51b815260206004820152600d60248201526c457363726f773a20656d70747960981b60448201526064016104b8565b60005b858110156106d857600087878381811061096557610965611130565b905060200201602081019061097a9190610e86565b6001600160a01b0316036109c55760405162461bcd60e51b81526020600482015260126024820152710457363726f773a206d65726368616e743d360741b60448201526064016104b8565b60008383838181106109d9576109d9611130565b9050602002013511610a205760405162461bcd60e51b815260206004820152601060248201526f0457363726f773a20616d6f756e743d360841b60448201526064016104b8565b600101610949565b6000805b84811015610a9a576000868683818110610a4857610a48611130565b9050602002016020810190610a5d9190610e86565b6001600160a01b031603610a9257838382818110610a7d57610a7d611130565b9050602002013582610a8f9190611146565b91505b600101610a2c565b50949350505050565b6001600160a01b038416610b42576001600160a01b03808616600090815260016020908152604080832093881683529290529081208054859290610ae8908490611146565b90915550610af890508585610da3565b836001600160a01b0316856001600160a01b0316826001600160a01b031660008051602061116e83398151915286604051610b3591815260200190565b60405180910390a4610be4565b610b576001600160a01b038516833086610e31565b6001600160a01b03808616600090815260016020908152604080832093881683529290529081208054859290610b8e908490611146565b90915550610b9e90508585610da3565b836001600160a01b0316856001600160a01b0316836001600160a01b031660008051602061116e83398151915286604051610bdb91815260200190565b60405180910390a45b5050505050565b6001600160a01b038316610c8a576001600160a01b03808516600090815260016020908152604080832093871683529290529081208054849290610c30908490611146565b90915550610c4090508484610da3565b826001600160a01b0316846001600160a01b0316826001600160a01b031660008051602061116e83398151915285604051610c7d91815260200190565b60405180910390a4610d2c565b610c9f6001600160a01b038416823085610e31565b6001600160a01b03808516600090815260016020908152604080832093871683529290529081208054849290610cd6908490611146565b90915550610ce690508484610da3565b826001600160a01b0316846001600160a01b0316826001600160a01b031660008051602061116e83398151915285604051610d2391815260200190565b60405180910390a45b50505050565b600080602060008451602086016000885af180610d55576040513d6000823e3d81fd5b50506000513d91508115610d6d578060011415610d7a565b6001600160a01b0384163b155b15610d2c57604051635274afe760e01b81526001600160a01b03851660048201526024016104b8565b6001600160a01b0380831660009081526003602090815260408083209385168352929052205460ff16610e2d576001600160a01b038083166000818152600360209081526040808320948616808452948252808320805460ff1916600190811790915593835260028252822080549384018155825290200180546001600160a01b03191690911790555b5050565b6040516001600160a01b038481166024830152838116604483015260648201839052610d2c9186918216906323b872dd90608401610878565b80356001600160a01b0381168114610e8157600080fd5b919050565b600060208284031215610e9857600080fd5b610ea182610e6a565b9392505050565b604080825283519082018190526000906020906060840190828701845b82811015610eea5781516001600160a01b031684529284019290840190600101610ec5565b5050508381038285015284518082528583019183019060005b81811015610f1f57835183529284019291840191600101610f03565b5090979650505050505050565b60008083601f840112610f3e57600080fd5b50813567ffffffffffffffff811115610f5657600080fd5b6020830191508360208260051b8501011115610f7157600080fd5b9250929050565b60008060008060008060006080888a031215610f9357600080fd5b610f9c88610e6a565b9650602088013567ffffffffffffffff80821115610fb957600080fd5b610fc58b838c01610f2c565b909850965060408a0135915080821115610fde57600080fd5b610fea8b838c01610f2c565b909650945060608a013591508082111561100357600080fd5b506110108a828b01610f2c565b989b979a50959850939692959293505050565b6000806040838503121561103657600080fd5b61103f83610e6a565b915061104d60208401610e6a565b90509250929050565b6000806040838503121561106957600080fd5b61107283610e6a565b946020939093013593505050565b6000806000806000806060878903121561109957600080fd5b863567ffffffffffffffff808211156110b157600080fd5b6110bd8a838b01610f2c565b909850965060208901359150808211156110d657600080fd5b6110e28a838b01610f2c565b909650945060408901359150808211156110fb57600080fd5b5061110889828a01610f2c565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8082018082111561116757634e487b7160e01b600052601160045260246000fd5b9291505056fe4174a9435a04d04d274c76779cad136a41fde6937c56241c09ab9d3c7064a1a9a2646970667358221220cb9afe469584ed6027068595f0a64ff4329da9edb999381e4588f3bf07bcebff64736f6c63430008160033",
  "devdoc": {
    "details": "Use address(0) to represent native token (ETH/FLOW/↯HBAR on EVM).",
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "depositFor(address,address[],address[],uint256[])": {
        "params": {
          "_amounts": "Amounts per leg",
          "_from": "The token owner for ERC20 transferFrom (ignored for native legs)",
          "_merchants": "Merchant list (same length as _tokens/_amounts)",
          "_tokens": "Token addresses (use address(0) for native)"
        }
      }
    },
    "title": "Simple Escrow (Relayer-friendly)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositFor(address,address[],address[],uint256[])": {
        "notice": "Relayer-friendly path. For ERC20, user must approve this Escrow as spender:         IERC20(token).approve(address(this), amount)"
      }
    },
    "notice": "Minimal escrow with:         - viewEscrow(merchant)         - deposit(...)           // user-pays gas path (unchanged)         - depositFor(from, ...)  // relayer path (Escrow is spender)         - withdraw()             // merchant pulls all their balances",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 642,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 733,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "merchantBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 738,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "merchantTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 744,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "merchantHasToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}